---
import type { CollectionEntry } from 'astro:content'

import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import FormattedDate from '../components/FormattedDate.astro'

type Props = CollectionEntry<'recipes'>['data']
const {
  title,
  description,
  prepTime,
  cookTime,
  pubDate,
  heroImage,
  ingredients,
  serves,
} = Astro.props
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }
      .hero-image {
        width: 100%;
        aspect-ratio: 2 / 1;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .hero-image img {
        width: 100%;
        height: 100%;
        display: block;
        object-fit: cover;
        object-position: 50% 50%;
        border-radius: 0;
        box-shadow: none;
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }

      .ingredient-text {
        color: darkgreen;
      }

      #mult-controls label {
        margin-right: 0.5em;
      }
      #multiplier-input {
        width: 4em;
        padding: 0.25em;
        font-size: 1em;
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <ingredient-scaler
          data-ingredients={JSON.stringify(ingredients)}
          data-serves={serves}
        >
          <div class="prose">
            <div class="hero-image">
              {heroImage && <img src={heroImage} alt="" />}
            </div>
            <div class="title">
              <div class="date">
                <FormattedDate date={pubDate} />
              </div>
              <h1>{title}</h1>
              <hr />
              <p>
                <strong>Prep:</strong>
                {prepTime} | <strong>Cook:</strong>
                {cookTime}
              </p>
            </div>

            <div id="mult-controls">
              <label for="multiplier-input"><strong>Serves:</strong></label>
              <input
                type="number"
                id="multiplier-input"
                value={serves}
                step="1"
              />
            </div>
            <br />

            <h3>Ingredients:</h3>
            <div id="ingredient-root"></div>

            <h3>Instructions:</h3>
            <div id="instructions-container">
              <slot />
            </div>
          </div>
        </ingredient-scaler>
      </article>
    </main>
    <Footer />
    <script>
      class IngredientScaler extends HTMLElement {
        connectedCallback() {
          const raw = this.dataset.ingredients || '[]'
          /** @type {({ title: string } | { name: string; quantity: number; unit: string })[]} */
          const ingredientsData = JSON.parse(raw)

          const originalServes = parseFloat(this.dataset.serves || '1') || 1
          let scaleFactor = 1

          const servingsInput = this.querySelector('#multiplier-input')
          if (!(servingsInput instanceof HTMLInputElement)) return

          const ingredientRoot = this.querySelector('#ingredient-root')
          const instructionsContainer = this.querySelector(
            '#instructions-container',
          )
          if (!ingredientRoot || !instructionsContainer) return

          const originalInstructions = instructionsContainer.innerHTML

          const formatIngredient = (ing: any) => {
            const raw = ing.quantity * scaleFactor
            const qty = raw.toFixed(2).replace(/\.?0+$/, '')
            return `<span style="color: #004f00;">${qty} ${ing.unit} ${ing.name}</span>`
          }

          const renderAll = () => {
            const newServes = parseFloat(servingsInput.value) || originalServes
            scaleFactor = newServes / originalServes

            // clear and rebuild ingredient groups
            ingredientRoot.innerHTML = ''
            let currentUl = null

            for (const item of ingredientsData) {
              if ('title' in item) {
                currentUl = null
                const h4 = document.createElement('h5')
                h4.style.marginTop = '1rem'
                h4.textContent = item.title
                ingredientRoot.appendChild(h4)
              } else {
                if (!currentUl) {
                  currentUl = document.createElement('ul')
                  currentUl.id = 'ingredient-list'
                  ingredientRoot.appendChild(currentUl)
                }
                const li = document.createElement('li')
                li.innerHTML = formatIngredient(item)
                currentUl.appendChild(li)
              }
            }

            // 1) Handle [[[Name]]] → just "Name"
            let html = originalInstructions.replace(
              /\[\[\[\s*([^\]]+?)\s*\]\]\]/g,
              (_m, token) =>
                `<span style="color: #004f00;">${token.trim()}</span>`,
            )

            // 2) Handle [[Name]] → formatted "qty unit Name"
            html = html.replace(/\[\[\s*([^\]]+?)\s*\]\]/g, (_m, token) => {
              const name = token.trim()
              const found = ingredientsData.find((i: any) => i.name === name)
              return found
                ? formatIngredient(found)
                : `<span style="color: #004f00;">${name}</span>`
            })

            instructionsContainer.innerHTML = html
          }

          servingsInput.addEventListener('input', (e) => {
            const input = e.target
            if (!(input instanceof HTMLInputElement)) return
            const v = parseFloat(input.value)
            scaleFactor = !isNaN(v) && v > 0 ? v : 1
            renderAll()
          })

          renderAll()
        }
      }

      customElements.define('ingredient-scaler', IngredientScaler)
    </script>
  </body>
</html>
